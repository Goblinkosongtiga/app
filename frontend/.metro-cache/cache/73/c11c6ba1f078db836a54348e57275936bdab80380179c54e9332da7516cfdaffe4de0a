{"dependencies":[{"name":"./stringify","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":20,"index":150},"end":{"line":5,"column":42,"index":172}}],"key":"vKXl7HivxR5NO0aDUWBR8MSBFn8=","exportNames":["*"]}},{"name":"./rng","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":14,"index":188},"end":{"line":6,"column":30,"index":204}}],"key":"NA4/UdR/SiFRjHUIo++GJkhhYyA=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.v1 = void 0;\n  /* eslint-disable no-bitwise */\n  const stringify_1 = require(_dependencyMap[0], \"./stringify\");\n  const rng_1 = require(_dependencyMap[1], \"./rng\");\n  // **`v1()` - Generate time-based UUID**\n  //\n  // Inspired by https://github.com/LiosK/UUID.js\n  // and http://docs.python.org/library/uuid.html\n  let _nodeId;\n  let _clockseq;\n  // Previous uuid creation time\n  let _lastMSecs = 0;\n  let _lastNSecs = 0;\n  // See https://github.com/uuidjs/uuid for API details\n  const v1 = (options, buf, offset = 0) => {\n    let i = buf && offset || 0;\n    const b = buf || new Uint8Array(16);\n    let node = options && options.node ? options.node : _nodeId;\n    let clockseq = options && options.clockseq ? options.clockseq : _clockseq;\n    // node and clockseq need to be initialized to random values if they're not\n    // specified.  We do this lazily to minimize issues related to insufficient\n    // system entropy.  See #189\n    if (node == null || clockseq == null) {\n      const seedBytes = options && options.random ? options.random : options && options.rng ? options.rng() : (0, rng_1.rng)();\n      if (node == null) {\n        // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n        node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n      }\n      if (clockseq == null) {\n        // Per 4.2.2, randomize (14 bit) clockseq\n        clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n      }\n    }\n    // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n    let msecs = options && options.msecs ? options.msecs : Date.now();\n    // Per 4.2.1.2, use count of uuid's generated during the current clock\n    // cycle to simulate higher resolution clock\n    let nsecs = options && options.nsecs ? options.nsecs : _lastNSecs + 1;\n    // Time since last uuid creation (in msecs)\n    const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000;\n    // Per 4.2.1.2, Bump clockseq on clock regression\n    if (dt < 0 && options && !options.clockseq) {\n      clockseq = clockseq + 1 & 0x3fff;\n    }\n    // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n    // time interval\n    if ((dt < 0 || msecs > _lastMSecs) && options && !options.nsecs) {\n      nsecs = 0;\n    }\n    // Per 4.2.1.2 Throw error if too many uuids are requested\n    if (nsecs >= 10000) {\n      throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n    }\n    _lastMSecs = msecs;\n    _lastNSecs = nsecs;\n    _clockseq = clockseq;\n    // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n    msecs += 12219292800000;\n    // `time_low`\n    const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n    b[i++] = tl >>> 24 & 0xff;\n    b[i++] = tl >>> 16 & 0xff;\n    b[i++] = tl >>> 8 & 0xff;\n    b[i++] = tl & 0xff;\n    // `time_mid`\n    const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n    b[i++] = tmh >>> 8 & 0xff;\n    b[i++] = tmh & 0xff;\n    // `time_high_and_version`\n    b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n    b[i++] = tmh >>> 16 & 0xff;\n    // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n    b[i++] = clockseq >>> 8 | 0x80;\n    // `clock_seq_low`\n    b[i++] = clockseq & 0xff;\n    // `node`\n    for (let n = 0; n < 6; ++n) {\n      b[i + n] = node[n];\n    }\n    return buf || (0, stringify_1.stringify)(b);\n  };\n  exports.v1 = v1;\n});","lineCount":92,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"v1"],[7,12,3,10],[7,15,3,13],[7,20,3,18],[7,21,3,19],[8,2,4,0],[9,2,5,0],[9,8,5,6,"stringify_1"],[9,19,5,17],[9,22,5,20,"require"],[9,29,5,27],[9,30,5,27,"_dependencyMap"],[9,44,5,27],[9,62,5,41],[9,63,5,42],[10,2,6,0],[10,8,6,6,"rng_1"],[10,13,6,11],[10,16,6,14,"require"],[10,23,6,21],[10,24,6,21,"_dependencyMap"],[10,38,6,21],[10,50,6,29],[10,51,6,30],[11,2,7,0],[12,2,8,0],[13,2,9,0],[14,2,10,0],[15,2,11,0],[15,6,11,4,"_nodeId"],[15,13,11,11],[16,2,12,0],[16,6,12,4,"_clockseq"],[16,15,12,13],[17,2,13,0],[18,2,14,0],[18,6,14,4,"_lastMSecs"],[18,16,14,14],[18,19,14,17],[18,20,14,18],[19,2,15,0],[19,6,15,4,"_lastNSecs"],[19,16,15,14],[19,19,15,17],[19,20,15,18],[20,2,16,0],[21,2,17,0],[21,8,17,6,"v1"],[21,10,17,8],[21,13,17,11,"v1"],[21,14,17,12,"options"],[21,21,17,19],[21,23,17,21,"buf"],[21,26,17,24],[21,28,17,26,"offset"],[21,34,17,32],[21,37,17,35],[21,38,17,36],[21,43,17,41],[22,4,18,4],[22,8,18,8,"i"],[22,9,18,9],[22,12,18,13,"buf"],[22,15,18,16],[22,19,18,20,"offset"],[22,25,18,26],[22,29,18,31],[22,30,18,32],[23,4,19,4],[23,10,19,10,"b"],[23,11,19,11],[23,14,19,14,"buf"],[23,17,19,17],[23,21,19,21],[23,25,19,25,"Uint8Array"],[23,35,19,35],[23,36,19,36],[23,38,19,38],[23,39,19,39],[24,4,20,4],[24,8,20,8,"node"],[24,12,20,12],[24,15,20,15,"options"],[24,22,20,22],[24,26,20,26,"options"],[24,33,20,33],[24,34,20,34,"node"],[24,38,20,38],[24,41,20,41,"options"],[24,48,20,48],[24,49,20,49,"node"],[24,53,20,53],[24,56,20,56,"_nodeId"],[24,63,20,63],[25,4,21,4],[25,8,21,8,"clockseq"],[25,16,21,16],[25,19,21,19,"options"],[25,26,21,26],[25,30,21,30,"options"],[25,37,21,37],[25,38,21,38,"clockseq"],[25,46,21,46],[25,49,21,49,"options"],[25,56,21,56],[25,57,21,57,"clockseq"],[25,65,21,65],[25,68,21,68,"_clockseq"],[25,77,21,77],[26,4,22,4],[27,4,23,4],[28,4,24,4],[29,4,25,4],[29,8,25,8,"node"],[29,12,25,12],[29,16,25,16],[29,20,25,20],[29,24,25,24,"clockseq"],[29,32,25,32],[29,36,25,36],[29,40,25,40],[29,42,25,42],[30,6,26,8],[30,12,26,14,"seedBytes"],[30,21,26,23],[30,24,26,26,"options"],[30,31,26,33],[30,35,26,37,"options"],[30,42,26,44],[30,43,26,45,"random"],[30,49,26,51],[30,52,27,14,"options"],[30,59,27,21],[30,60,27,22,"random"],[30,66,27,28],[30,69,28,14,"options"],[30,76,28,21],[30,80,28,25,"options"],[30,87,28,32],[30,88,28,33,"rng"],[30,91,28,36],[30,94,29,18,"options"],[30,101,29,25],[30,102,29,26,"rng"],[30,105,29,29],[30,106,29,30],[30,107,29,31],[30,110,30,18],[30,111,30,19],[30,112,30,20],[30,114,30,22,"rng_1"],[30,119,30,27],[30,120,30,28,"rng"],[30,123,30,31],[30,125,30,33],[30,126,30,34],[31,6,31,8],[31,10,31,12,"node"],[31,14,31,16],[31,18,31,20],[31,22,31,24],[31,24,31,26],[32,8,32,12],[33,8,33,12,"node"],[33,12,33,16],[33,15,33,19,"_nodeId"],[33,22,33,26],[33,25,33,29],[33,26,34,16,"seedBytes"],[33,35,34,25],[33,36,34,26],[33,37,34,27],[33,38,34,28],[33,41,34,31],[33,45,34,35],[33,47,35,16,"seedBytes"],[33,56,35,25],[33,57,35,26],[33,58,35,27],[33,59,35,28],[33,61,36,16,"seedBytes"],[33,70,36,25],[33,71,36,26],[33,72,36,27],[33,73,36,28],[33,75,37,16,"seedBytes"],[33,84,37,25],[33,85,37,26],[33,86,37,27],[33,87,37,28],[33,89,38,16,"seedBytes"],[33,98,38,25],[33,99,38,26],[33,100,38,27],[33,101,38,28],[33,103,39,16,"seedBytes"],[33,112,39,25],[33,113,39,26],[33,114,39,27],[33,115,39,28],[33,116,40,13],[34,6,41,8],[35,6,42,8],[35,10,42,12,"clockseq"],[35,18,42,20],[35,22,42,24],[35,26,42,28],[35,28,42,30],[36,8,43,12],[37,8,44,12,"clockseq"],[37,16,44,20],[37,19,44,23,"_clockseq"],[37,28,44,32],[37,31,44,35],[37,32,44,37,"seedBytes"],[37,41,44,46],[37,42,44,47],[37,43,44,48],[37,44,44,49],[37,48,44,53],[37,49,44,54],[37,52,44,58,"seedBytes"],[37,61,44,67],[37,62,44,68],[37,63,44,69],[37,64,44,70],[37,68,44,74],[37,74,44,80],[38,6,45,8],[39,4,46,4],[40,4,47,4],[41,4,48,4],[42,4,49,4],[43,4,50,4],[44,4,51,4],[44,8,51,8,"msecs"],[44,13,51,13],[44,16,51,16,"options"],[44,23,51,23],[44,27,51,27,"options"],[44,34,51,34],[44,35,51,35,"msecs"],[44,40,51,40],[44,43,51,43,"options"],[44,50,51,50],[44,51,51,51,"msecs"],[44,56,51,56],[44,59,51,59,"Date"],[44,63,51,63],[44,64,51,64,"now"],[44,67,51,67],[44,68,51,68],[44,69,51,69],[45,4,52,4],[46,4,53,4],[47,4,54,4],[47,8,54,8,"nsecs"],[47,13,54,13],[47,16,54,16,"options"],[47,23,54,23],[47,27,54,27,"options"],[47,34,54,34],[47,35,54,35,"nsecs"],[47,40,54,40],[47,43,54,43,"options"],[47,50,54,50],[47,51,54,51,"nsecs"],[47,56,54,56],[47,59,54,59,"_lastNSecs"],[47,69,54,69],[47,72,54,72],[47,73,54,73],[48,4,55,4],[49,4,56,4],[49,10,56,10,"dt"],[49,12,56,12],[49,15,56,15,"msecs"],[49,20,56,20],[49,23,56,23,"_lastMSecs"],[49,33,56,33],[49,36,56,36],[49,37,56,37,"nsecs"],[49,42,56,42],[49,45,56,45,"_lastNSecs"],[49,55,56,55],[49,59,56,59],[49,64,56,64],[50,4,57,4],[51,4,58,4],[51,8,58,8,"dt"],[51,10,58,10],[51,13,58,13],[51,14,58,14],[51,18,58,18,"options"],[51,25,58,25],[51,29,58,29],[51,30,58,30,"options"],[51,37,58,37],[51,38,58,38,"clockseq"],[51,46,58,46],[51,48,58,48],[52,6,59,8,"clockseq"],[52,14,59,16],[52,17,59,20,"clockseq"],[52,25,59,28],[52,28,59,31],[52,29,59,32],[52,32,59,36],[52,38,59,42],[53,4,60,4],[54,4,61,4],[55,4,62,4],[56,4,63,4],[56,8,63,8],[56,9,63,9,"dt"],[56,11,63,11],[56,14,63,14],[56,15,63,15],[56,19,63,19,"msecs"],[56,24,63,24],[56,27,63,27,"_lastMSecs"],[56,37,63,37],[56,42,63,42,"options"],[56,49,63,49],[56,53,63,53],[56,54,63,54,"options"],[56,61,63,61],[56,62,63,62,"nsecs"],[56,67,63,67],[56,69,63,69],[57,6,64,8,"nsecs"],[57,11,64,13],[57,14,64,16],[57,15,64,17],[58,4,65,4],[59,4,66,4],[60,4,67,4],[60,8,67,8,"nsecs"],[60,13,67,13],[60,17,67,17],[60,22,67,22],[60,24,67,24],[61,6,68,8],[61,12,68,14],[61,16,68,18,"Error"],[61,21,68,23],[61,22,68,24],[61,71,68,73],[61,72,68,74],[62,4,69,4],[63,4,70,4,"_lastMSecs"],[63,14,70,14],[63,17,70,17,"msecs"],[63,22,70,22],[64,4,71,4,"_lastNSecs"],[64,14,71,14],[64,17,71,17,"nsecs"],[64,22,71,22],[65,4,72,4,"_clockseq"],[65,13,72,13],[65,16,72,16,"clockseq"],[65,24,72,24],[66,4,73,4],[67,4,74,4,"msecs"],[67,9,74,9],[67,13,74,13],[67,27,74,27],[68,4,75,4],[69,4,76,4],[69,10,76,10,"tl"],[69,12,76,12],[69,15,76,15],[69,16,76,16],[69,17,76,17,"msecs"],[69,22,76,22],[69,25,76,25],[69,34,76,34],[69,38,76,38],[69,43,76,43],[69,46,76,46,"nsecs"],[69,51,76,51],[69,55,76,55],[69,66,76,66],[70,4,77,4,"b"],[70,5,77,5],[70,6,77,6,"i"],[70,7,77,7],[70,9,77,9],[70,10,77,10],[70,13,77,14,"tl"],[70,15,77,16],[70,20,77,21],[70,22,77,23],[70,25,77,27],[70,29,77,31],[71,4,78,4,"b"],[71,5,78,5],[71,6,78,6,"i"],[71,7,78,7],[71,9,78,9],[71,10,78,10],[71,13,78,14,"tl"],[71,15,78,16],[71,20,78,21],[71,22,78,23],[71,25,78,27],[71,29,78,31],[72,4,79,4,"b"],[72,5,79,5],[72,6,79,6,"i"],[72,7,79,7],[72,9,79,9],[72,10,79,10],[72,13,79,14,"tl"],[72,15,79,16],[72,20,79,21],[72,21,79,22],[72,24,79,26],[72,28,79,30],[73,4,80,4,"b"],[73,5,80,5],[73,6,80,6,"i"],[73,7,80,7],[73,9,80,9],[73,10,80,10],[73,13,80,13,"tl"],[73,15,80,15],[73,18,80,18],[73,22,80,22],[74,4,81,4],[75,4,82,4],[75,10,82,10,"tmh"],[75,13,82,13],[75,16,82,18,"msecs"],[75,21,82,23],[75,24,82,26],[75,35,82,37],[75,38,82,41],[75,43,82,46],[75,46,82,50],[75,55,82,59],[76,4,83,4,"b"],[76,5,83,5],[76,6,83,6,"i"],[76,7,83,7],[76,9,83,9],[76,10,83,10],[76,13,83,14,"tmh"],[76,16,83,17],[76,21,83,22],[76,22,83,23],[76,25,83,27],[76,29,83,31],[77,4,84,4,"b"],[77,5,84,5],[77,6,84,6,"i"],[77,7,84,7],[77,9,84,9],[77,10,84,10],[77,13,84,13,"tmh"],[77,16,84,16],[77,19,84,19],[77,23,84,23],[78,4,85,4],[79,4,86,4,"b"],[79,5,86,5],[79,6,86,6,"i"],[79,7,86,7],[79,9,86,9],[79,10,86,10],[79,13,86,15,"tmh"],[79,16,86,18],[79,21,86,23],[79,23,86,25],[79,26,86,29],[79,29,86,32],[79,32,86,36],[79,36,86,40],[79,37,86,41],[79,38,86,42],[80,4,87,4,"b"],[80,5,87,5],[80,6,87,6,"i"],[80,7,87,7],[80,9,87,9],[80,10,87,10],[80,13,87,14,"tmh"],[80,16,87,17],[80,21,87,22],[80,23,87,24],[80,26,87,28],[80,30,87,32],[81,4,88,4],[82,4,89,4,"b"],[82,5,89,5],[82,6,89,6,"i"],[82,7,89,7],[82,9,89,9],[82,10,89,10],[82,13,89,14,"clockseq"],[82,21,89,22],[82,26,89,27],[82,27,89,28],[82,30,89,32],[82,34,89,36],[83,4,90,4],[84,4,91,4,"b"],[84,5,91,5],[84,6,91,6,"i"],[84,7,91,7],[84,9,91,9],[84,10,91,10],[84,13,91,13,"clockseq"],[84,21,91,21],[84,24,91,24],[84,28,91,28],[85,4,92,4],[86,4,93,4],[86,9,93,9],[86,13,93,13,"n"],[86,14,93,14],[86,17,93,17],[86,18,93,18],[86,20,93,20,"n"],[86,21,93,21],[86,24,93,24],[86,25,93,25],[86,27,93,27],[86,29,93,29,"n"],[86,30,93,30],[86,32,93,32],[87,6,94,8,"b"],[87,7,94,9],[87,8,94,10,"i"],[87,9,94,11],[87,12,94,14,"n"],[87,13,94,15],[87,14,94,16],[87,17,94,19,"node"],[87,21,94,23],[87,22,94,24,"n"],[87,23,94,25],[87,24,94,26],[88,4,95,4],[89,4,96,4],[89,11,96,11,"buf"],[89,14,96,14],[89,18,96,18],[89,19,96,19],[89,20,96,20],[89,22,96,22,"stringify_1"],[89,33,96,33],[89,34,96,34,"stringify"],[89,43,96,43],[89,45,96,45,"b"],[89,46,96,46],[89,47,96,47],[90,2,97,0],[90,3,97,1],[91,2,98,0,"exports"],[91,9,98,7],[91,10,98,8,"v1"],[91,12,98,10],[91,15,98,13,"v1"],[91,17,98,15],[92,0,98,16],[92,3]],"functionMap":{"names":["<global>","v1"],"mappings":"AAA;WCgB;CDgF"}},"type":"js/module"}]}