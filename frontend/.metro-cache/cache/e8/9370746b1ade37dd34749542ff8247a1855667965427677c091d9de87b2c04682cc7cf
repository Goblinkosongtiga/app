{"dependencies":[{"name":"./stringify","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":20,"index":151},"end":{"line":5,"column":42,"index":173}}],"key":"vKXl7HivxR5NO0aDUWBR8MSBFn8=","exportNames":["*"]}},{"name":"./parse","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":16,"index":191},"end":{"line":6,"column":34,"index":209}}],"key":"d8xDpyT6iu7qoMtvfx6PIyownmY=","exportNames":["*"]}},{"name":"./utils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":16,"index":227},"end":{"line":7,"column":34,"index":245}}],"key":"Arg6QRuIuy5D/jfcnxX1qJiHjX8=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.v35 = void 0;\n  /* eslint-disable no-bitwise */\n  const stringify_1 = require(_dependencyMap[0], \"./stringify\");\n  const parse_1 = require(_dependencyMap[1], \"./parse\");\n  const utils_1 = require(_dependencyMap[2], \"./utils\");\n  const v35 = (name, version, hashfunc) => {\n    const generateUUID = (value, namespace, buf, offset = 0) => {\n      if (typeof value === 'string') {\n        value = (0, utils_1.stringToBytes)(value);\n      }\n      if (typeof namespace === 'string') {\n        namespace = (0, parse_1.parse)(namespace);\n      }\n      if (namespace && namespace.length !== 16) {\n        throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n      }\n      // Compute hash of namespace and value, Per 4.3\n      // Future: Use spread syntax when supported on all platforms, e.g.\n      // `bytes = hashfunc([...namespace, ... value])`\n      let bytes = new Uint8Array(16 + value.length);\n      bytes.set(namespace);\n      bytes.set(value, namespace.length);\n      bytes = (0, utils_1.stringToBytes)(hashfunc((0, utils_1.bytesToString)(bytes)));\n      bytes[6] = bytes[6] & 0x0f | version;\n      bytes[8] = bytes[8] & 0x3f | 0x80;\n      if (buf) {\n        for (let i = 0; i < 16; ++i) {\n          buf[offset + i] = bytes[i];\n        }\n      }\n      return buf ? buf : (0, stringify_1.stringify)(bytes);\n    };\n    return generateUUID;\n  };\n  exports.v35 = v35;\n});","lineCount":42,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"v35"],[7,13,3,11],[7,16,3,14],[7,21,3,19],[7,22,3,20],[8,2,4,0],[9,2,5,0],[9,8,5,6,"stringify_1"],[9,19,5,17],[9,22,5,20,"require"],[9,29,5,27],[9,30,5,27,"_dependencyMap"],[9,44,5,27],[9,62,5,41],[9,63,5,42],[10,2,6,0],[10,8,6,6,"parse_1"],[10,15,6,13],[10,18,6,16,"require"],[10,25,6,23],[10,26,6,23,"_dependencyMap"],[10,40,6,23],[10,54,6,33],[10,55,6,34],[11,2,7,0],[11,8,7,6,"utils_1"],[11,15,7,13],[11,18,7,16,"require"],[11,25,7,23],[11,26,7,23,"_dependencyMap"],[11,40,7,23],[11,54,7,33],[11,55,7,34],[12,2,8,0],[12,8,8,6,"v35"],[12,11,8,9],[12,14,8,12,"v35"],[12,15,8,13,"name"],[12,19,8,17],[12,21,8,19,"version"],[12,28,8,26],[12,30,8,28,"hashfunc"],[12,38,8,36],[12,43,8,41],[13,4,9,4],[13,10,9,10,"generateUUID"],[13,22,9,22],[13,25,9,25,"generateUUID"],[13,26,9,26,"value"],[13,31,9,31],[13,33,9,33,"namespace"],[13,42,9,42],[13,44,9,44,"buf"],[13,47,9,47],[13,49,9,49,"offset"],[13,55,9,55],[13,58,9,58],[13,59,9,59],[13,64,9,64],[14,6,10,8],[14,10,10,12],[14,17,10,19,"value"],[14,22,10,24],[14,27,10,29],[14,35,10,37],[14,37,10,39],[15,8,11,12,"value"],[15,13,11,17],[15,16,11,20],[15,17,11,21],[15,18,11,22],[15,20,11,24,"utils_1"],[15,27,11,31],[15,28,11,32,"stringToBytes"],[15,41,11,45],[15,43,11,47,"value"],[15,48,11,52],[15,49,11,53],[16,6,12,8],[17,6,13,8],[17,10,13,12],[17,17,13,19,"namespace"],[17,26,13,28],[17,31,13,33],[17,39,13,41],[17,41,13,43],[18,8,14,12,"namespace"],[18,17,14,21],[18,20,14,24],[18,21,14,25],[18,22,14,26],[18,24,14,28,"parse_1"],[18,31,14,35],[18,32,14,36,"parse"],[18,37,14,41],[18,39,14,43,"namespace"],[18,48,14,52],[18,49,14,53],[19,6,15,8],[20,6,16,8],[20,10,16,12,"namespace"],[20,19,16,21],[20,23,16,25,"namespace"],[20,32,16,34],[20,33,16,35,"length"],[20,39,16,41],[20,44,16,46],[20,46,16,48],[20,48,16,50],[21,8,17,12],[21,14,17,18,"TypeError"],[21,23,17,27],[21,24,17,28],[21,90,17,94],[21,91,17,95],[22,6,18,8],[23,6,19,8],[24,6,20,8],[25,6,21,8],[26,6,22,8],[26,10,22,12,"bytes"],[26,15,22,17],[26,18,22,20],[26,22,22,24,"Uint8Array"],[26,32,22,34],[26,33,22,35],[26,35,22,37],[26,38,22,40,"value"],[26,43,22,45],[26,44,22,46,"length"],[26,50,22,52],[26,51,22,53],[27,6,23,8,"bytes"],[27,11,23,13],[27,12,23,14,"set"],[27,15,23,17],[27,16,23,18,"namespace"],[27,25,23,27],[27,26,23,28],[28,6,24,8,"bytes"],[28,11,24,13],[28,12,24,14,"set"],[28,15,24,17],[28,16,24,18,"value"],[28,21,24,23],[28,23,24,25,"namespace"],[28,32,24,34],[28,33,24,35,"length"],[28,39,24,41],[28,40,24,42],[29,6,25,8,"bytes"],[29,11,25,13],[29,14,25,16],[29,15,25,17],[29,16,25,18],[29,18,25,20,"utils_1"],[29,25,25,27],[29,26,25,28,"stringToBytes"],[29,39,25,41],[29,41,25,43,"hashfunc"],[29,49,25,51],[29,50,25,52],[29,51,25,53],[29,52,25,54],[29,54,25,56,"utils_1"],[29,61,25,63],[29,62,25,64,"bytesToString"],[29,75,25,77],[29,77,25,79,"bytes"],[29,82,25,84],[29,83,25,85],[29,84,25,86],[29,85,25,87],[30,6,26,8,"bytes"],[30,11,26,13],[30,12,26,14],[30,13,26,15],[30,14,26,16],[30,17,26,20,"bytes"],[30,22,26,25],[30,23,26,26],[30,24,26,27],[30,25,26,28],[30,28,26,31],[30,32,26,35],[30,35,26,39,"version"],[30,42,26,46],[31,6,27,8,"bytes"],[31,11,27,13],[31,12,27,14],[31,13,27,15],[31,14,27,16],[31,17,27,20,"bytes"],[31,22,27,25],[31,23,27,26],[31,24,27,27],[31,25,27,28],[31,28,27,31],[31,32,27,35],[31,35,27,39],[31,39,27,43],[32,6,28,8],[32,10,28,12,"buf"],[32,13,28,15],[32,15,28,17],[33,8,29,12],[33,13,29,17],[33,17,29,21,"i"],[33,18,29,22],[33,21,29,25],[33,22,29,26],[33,24,29,28,"i"],[33,25,29,29],[33,28,29,32],[33,30,29,34],[33,32,29,36],[33,34,29,38,"i"],[33,35,29,39],[33,37,29,41],[34,10,30,16,"buf"],[34,13,30,19],[34,14,30,20,"offset"],[34,20,30,26],[34,23,30,29,"i"],[34,24,30,30],[34,25,30,31],[34,28,30,34,"bytes"],[34,33,30,39],[34,34,30,40,"i"],[34,35,30,41],[34,36,30,42],[35,8,31,12],[36,6,32,8],[37,6,33,8],[37,13,33,15,"buf"],[37,16,33,18],[37,19,33,21,"buf"],[37,22,33,24],[37,25,33,27],[37,26,33,28],[37,27,33,29],[37,29,33,31,"stringify_1"],[37,40,33,42],[37,41,33,43,"stringify"],[37,50,33,52],[37,52,33,54,"bytes"],[37,57,33,59],[37,58,33,60],[38,4,34,4],[38,5,34,5],[39,4,35,4],[39,11,35,11,"generateUUID"],[39,23,35,23],[40,2,36,0],[40,3,36,1],[41,2,37,0,"exports"],[41,9,37,7],[41,10,37,8,"v35"],[41,13,37,11],[41,16,37,14,"v35"],[41,19,37,17],[42,0,37,18],[42,3]],"functionMap":{"names":["<global>","v35","generateUUID"],"mappings":"AAA;YCO;yBCC;KDyB;CDE"}},"type":"js/module"}]}